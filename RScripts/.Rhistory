min_game <- from
max_game <- to
Actual_Models <-  c("Actual Value", Vec_Models)
nb_model <- length(Actual_Models)
ntry <- length(min_game:max_game)
Result <- matrix(numeric(ntry *nb_model), ncol =nb_model)
colnames(Result) <- Actual_Models
#Weight_AVG_Value <- numeric(ntry)
Best_Model_table <- numeric(nb_model-1)
names(Best_Model_table) <- Actual_Models[-1]
Sample_test<- (min_game:max_game)
for(i in seq(ntry)){
Rm <- Sample_test[i]
Data_train <- Data[1:(Rm-1),]
Data_predict <- Data[Rm,]
Pts_actual <- unlist(Data_predict[,3])
Data_predict[,(3:12)] <- NA
lm_mod <- lm(Points~., data = Data_train)
glm_pois <- glm(Points~., data = Data_train, family = "poisson")
glm_nbin <- glm.nb(Points~., data = Data_train)
#glm_elasticnet <- glmnetUtils::cv.glmnet(Points~., data = Data[-Rm,], family = "poisson")
Pts_actual <- unlist(Data_predict[,3])
Data_predict[,(3:12)] <- NA
data.imputed <- missForest(rbind(Data_train,Data_predict))$ximp
##XGBoost no RF
new_data <- Data[(1:(480+i)),-(4:12)]
Result[i,1] <- Pts_actual
Result[i,2] <- unlist(predict(lm_mod, newdata = data.imputed[Rm,-3]))
Result[i,3] <- unlist(predict(glm_pois, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,4] <- unlist(predict(glm_nbin, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,5] <- unlist(data.imputed[Rm,3])
Result[i,6] <- mean(replicate(10,(XGB_VALUE(Data_Impute = data.imputed))))
Result[i,7] <- XGB_VALUE(new_data)
if(i == 1){
Result[i,8] <- mean(Result[i, -1])
}else{
Best_model_order <- which.min(sapply(seq(nb_model-1), function(j) abs(Result[(i-1),(j+1)]- Result[(i-1),1])))
Best_Model_table[Best_model_order] <- Best_Model_table[Best_model_order] +1
Result[i,8] <- weighted.mean(Result[i,-1], Best_Model_table)
}
print(i)
print(paste(round(i/ntry,3)*100, "%", sep = ""))
}
}
install.packages("rstudioapi")
library(rstudioapi)
path_base <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(path_base)
install.packages("rstudioapi")
source("NFL_Packages.R")
# Base Infos ##################################################################################
source("NFL_Base_Info.R")
# NFL Web Scraping ############################################################################
source("NFL_Functions.R")
# Predict Scores ##############################################################################
Data_NFL <- Stat_UTD(Save_RDS = T)
Data_Team_Szn <- Data_NFL[[1]]
Data_Szn_Week <- Data_NFL[[2]]
C_Data_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) cbind(Data_Team_Szn[[Team]][[Szn]][,1:10], apply(Data_Team_Szn[[Team]][[Szn]][,11:20],2,GMCM:::cummean))))
for(Team in seq(length(Complete_Names))){
for(Szn in seq(length(C_Data_Team_Szn[[1]]))){
colnames(C_Data_Team_Szn[[Team]][[Szn]]) <- c(colnames(Data_Team_Szn[[1]][[1]])[1:10], sprintf("C_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20]))
}
}
SZN_Games <- lapply(seq(2), function(Szn) do.call("rbind", Data_Szn_Week[[Szn]]))
All_games <- do.call("rbind", SZN_Games)
# Rank----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ranking_Stats_Szn <-unlist(list(lapply((sprintf("C_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:15])),
function(Stats) lapply(seq(2),
function(Szn) t(do.call("rbind",lapply(seq(16), function(Week)
33 - as.numeric(rank(unlist(sapply(seq(32),
function(Team) C_Data_Team_Szn[[Team]][[Szn]][[Stats]][Week])), ties.method = "average"))))))),
lapply((sprintf("C_%s",  colnames(Data_Team_Szn[[1]][[1]])[16:20])),
function(Stats) lapply(seq(2),
function(Szn) t(do.call("rbind",lapply(seq(16), function(Week)
as.numeric(rank(unlist(sapply(seq(32),
function(Team) C_Data_Team_Szn[[Team]][[Szn]][[Stats]][Week])), ties.method = "average" ) ))))))), recursive = F)
# Cumulative Ranking----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ranking_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) t(do.call("rbind", lapply(seq(length(Ranking_Stats_Szn)), function(Stats)  Ranking_Stats_Szn[[Stats]][[Szn]][Team,])))))
C_Ranking_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) t(do.call("rbind", lapply(seq(length(Ranking_Stats_Szn)), function(Stats)  GMCM:::cummean(Ranking_Stats_Szn[[Stats]][[Szn]][Team,]))))))
Rank_E_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) do.call("rbind",  lapply(seq(16),
function(Week) C_Ranking_Team_Szn[[as.numeric(Data_Team_Szn[[Team]][[Szn]]$Rang_Alpha_VS)[Week]]][[Szn]][Week,]))))
C_Rank_E_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) apply(Rank_E_Team_Szn[[Team]][[Szn]],2,GMCM:::cummean)))
for(Team in seq(32)){
for(Szn in seq(2)){
colnames(Ranking_Team_Szn[[Team]][[Szn]]) <- sprintf("Rank_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
colnames(C_Ranking_Team_Szn[[Team]][[Szn]]) <- sprintf("C_Rank_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
colnames(Rank_E_Team_Szn[[Team]][[Szn]]) <- sprintf("Rank_E_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
colnames(C_Rank_E_Team_Szn[[Team]][[Szn]]) <- sprintf("C_Rank_E_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
}
}
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DataRank_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) cbind(Data_Team_Szn[[Team]][[Szn]], Ranking_Team_Szn[[Team]][[Szn]], Rank_E_Team_Szn[[Team]][[Szn]])))
C_DataRank_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) cbind(C_Data_Team_Szn[[Team]][[Szn]], C_Ranking_Team_Szn[[Team]][[Szn]], C_Rank_E_Team_Szn[[Team]][[Szn]])))
Total_Games_Szn_Data <- lapply(seq(2), function(Szn) do.call("rbind", lapply(seq(32), function(Team) DataRank_Team_Szn[[Team]][[Szn]])))
Total_Games_Szn_C.Data <- lapply(seq(2), function(Szn) do.call("rbind", lapply(seq(32), function(Team) C_DataRank_Team_Szn[[Team]][[Szn]])))
Total_Games_Rank_C.Rank <- lapply(seq(2), function(Szn)lapply(seq(32), function(Team) merge(DataRank_Team_Szn[[Team]][[Szn]], C_DataRank_Team_Szn[[Team]][[Szn]])))
C_E_Stat_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) t(sapply(seq(15), function(Games)  Total_Games_Rank_C.Rank[[Szn]][[as.numeric(unlist(Total_Games_Rank_C.Rank[[Szn]][[Team]][,7]))[(Games+1)]]][Games,41:50]))))
for(Szn in seq(2)){
for(Team in seq(32)){
colnames(C_E_Stat_Szn_Team[[Szn]][[Team]]) <- paste("C_E", substr(colnames(C_E_Stat_Szn_Team[[Szn]][[Team]]),2, 20), sep = "")
}
}
Decal_Total_wo_order_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) cbind(Total_Games_Rank_C.Rank[[Szn]][[Team]][2:16, c(6, 11:20)], Total_Games_Rank_C.Rank[[Szn]][[Team]][1:15, -c(6,11:20)], C_E_Stat_Szn_Team[[Szn]][[Team]])))
Decal_Total_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) Decal_Total_wo_order_Szn_Team[[Szn]][[Team]][,c("Game_Nb", "Team_Abb", "Rang_Alpha","Team_Abb_VS", "Rang_Alpha_VS",
"Outcome", "Points",
"Points_VS", "Yards", "FirstDowns", "Int", "Fum", "Yards_VS",  "FirstDowns_VS",  "Int_VS", "Fum_VS","HomeField",
"C_Points", "C_Yards", "C_FirstDowns", "C_Int",  "C_Fum",
"C_Points_VS", "C_Yards_VS","C_FirstDowns_VS", "C_Int_VS", "C_Fum_VS",
"C_E_Points", "C_E_Yards", "C_E_FirstDowns","C_E_Int", "C_E_Fum",
"C_E_Points_VS", "C_E_Yards_VS", "C_E_FirstDowns_VS", "C_E_Int_VS", "C_E_Fum_VS",
"Rank_Points", "Rank_Yards", "Rank_FirstDowns", "Rank_Int", "Rank_Fum",
"Rank_Points_VS", "Rank_Yards_VS", "Rank_FirstDowns_VS", "Rank_Int_VS", "Rank_Fum_VS",
"Rank_E_Points", "Rank_E_Yards", "Rank_E_FirstDowns",  "Rank_E_Int", "Rank_E_Fum",
"Rank_E_Points_VS", "Rank_E_Yards_VS", "Rank_E_FirstDowns_VS", "Rank_E_Int_VS", "Rank_E_Fum_VS",
"C_Rank_Points", "C_Rank_Yards", "C_Rank_FirstDowns", "C_Rank_Int", "C_Rank_Fum",
"C_Rank_Points_VS", "C_Rank_Yards_VS","C_Rank_FirstDowns_VS", "C_Rank_Int_VS", "C_Rank_Fum_VS",
"C_Rank_E_Points", "C_Rank_E_Yards", "C_Rank_E_FirstDowns", "C_Rank_E_Int", "C_Rank_E_Fum",
"C_Rank_E_Points_VS", "C_Rank_E_Yards_VS", "C_Rank_E_FirstDowns_VS", "C_Rank_E_Int_VS", "C_Rank_E_Fum_VS")]))
for(Szn in seq(2)){
for(Team in seq(32)){
Decal_Total_Szn_Team[[Szn]][[Team]]$Game_Nb <- Decal_Total_Szn_Team[[Szn]][[Team]]$Game_Nb+1
}
}
#Cant_Know_Before_Or_Useless <- c("Rang_Alpha", "Rang_Alpha_VS", "Outcome", "Yards", "FirstDowns", "Int", "Fum", "Points_VS", "Yards_VS", "FirstDowns_VS", "Int_VS", "Fum_VS")
Cant_Know_Before_Or_Useless <- c("Rang_Alpha", "Rang_Alpha_VS", "Outcome")
Test_V_KB_Total_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) Decal_Total_Szn_Team[[Szn]][[Team]][,-..Cant_Know_Before_Or_Useless]))
Total_Decal_2018 <- do.call("rbind", Test_V_KB_Total_Szn_Team[[1]])
Total_Decal_2019 <- do.call("rbind", Test_V_KB_Total_Szn_Team[[2]])
Total_Decal <- rbind(Total_Decal_2018, Total_Decal_2019)
Total_Decal$Points <- as.numeric(Total_Decal$Points)
Total_Decal$Team_Abb <- as.factor(Total_Decal$Team_Abb)
Total_Decal$Team_Abb_VS <- as.factor(Total_Decal$Team_Abb_VS)
Total_Decal$HomeField <- as.factor(Total_Decal$HomeField)
Data_test <- cbind(Total_Decal[,c(2:3)],apply(as.matrix(Total_Decal[,-c(1:3)]), 2, as.numeric) )
test <- function(Data_Train, Data_Predict, Model){
Predict_Value <- switch(Model,
"LM" = unlist(predict(object = lm(Points~., data = Data_train) , newdata = Data_Predict, type = "response")),
"GLM_POIS" =  glm(Points~., data = Data_train, family = "poisson"),
"GLM_NBIN"= glm.nb(Points~., data = Data_train),
"MissRF"= 2,
"XgBoost"= 2,
"XgBoost_No_RF"= 2,
"Weight_AVG_Value"= 2,
)
return(Predict_Value)
}
Vec_Models
for(modelz in Vec_Models){
List_Modelz[[modelz]] <-
}
#XGBoost function ############################################################################
source("NFL_XGB_fun")
NFL_Predict <- function(Data = Data_test, from = 481, to = 960, Vec_Models = c("LM", "GLM_POIS", "GLM_NBIN","MissRF", "XgBoost", "XgBoost_No_RF", "Weight_AVG_Value")){
min_game <- from
max_game <- to
Actual_Models <-  c("Actual Value", Vec_Models)
nb_model <- length(Actual_Models)
ntry <- length(min_game:max_game)
Result <- matrix(numeric(ntry *nb_model), ncol =nb_model)
colnames(Result) <- Actual_Models
#Weight_AVG_Value <- numeric(ntry)
Best_Model_table <- numeric(nb_model-1)
names(Best_Model_table) <- Actual_Models[-1]
Sample_test<- (min_game:max_game)
for(i in seq(ntry)){
Rm <- Sample_test[i]
Data_train <- Data[1:(Rm-1),]
Data_predict <- Data[Rm,]
Pts_actual <- unlist(Data_predict[,3])
Data_predict[,(3:12)] <- NA
lm_mod <- lm(Points~., data = Data_train)
glm_pois <- glm(Points~., data = Data_train, family = "poisson")
glm_nbin <- glm.nb(Points~., data = Data_train)
#glm_elasticnet <- glmnetUtils::cv.glmnet(Points~., data = Data[-Rm,], family = "poisson")
Pts_actual <- unlist(Data_predict[,3])
Data_predict[,(3:12)] <- NA
data.imputed <- missForest(rbind(Data_train,Data_predict))$ximp
##XGBoost no RF
new_data <- Data[(1:(480+i)),-(4:12)]
Result[i,1] <- Pts_actual
Result[i,2] <- unlist(predict(lm_mod, newdata = data.imputed[Rm,-3]))
Result[i,3] <- unlist(predict(glm_pois, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,4] <- unlist(predict(glm_nbin, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,5] <- unlist(data.imputed[Rm,3])
Result[i,6] <- mean(replicate(10,(XGB_VALUE(Data_Impute = data.imputed))))
Result[i,7] <- XGB_VALUE(new_data)
if(i == 1){
Result[i,8] <- mean(Result[i, -1])
}else{
Best_model_order <- which.min(sapply(seq(nb_model-1), function(j) abs(Result[(i-1),(j+1)]- Result[(i-1),1])))
Best_Model_table[Best_model_order] <- Best_Model_table[Best_model_order] +1
Result[i,8] <- weighted.mean(Result[i,-1], Best_Model_table)
}
print(i)
print(paste(round(i/ntry,3)*100, "%", sep = ""))
}
}
source("NFL_XGB_fun")
#XGBoost function ############################################################################
setwd(path_base)
source("NFL_XGB_fun")
source("NFL_XGB_fun.R")
NFL_Predict <- function(Data = Data_test, from = 481, to = 960, Vec_Models = c("LM", "GLM_POIS", "GLM_NBIN","MissRF", "XgBoost", "XgBoost_No_RF", "Weight_AVG_Value")){
min_game <- from
max_game <- to
Actual_Models <-  c("Actual Value", Vec_Models)
nb_model <- length(Actual_Models)
ntry <- length(min_game:max_game)
Result <- matrix(numeric(ntry *nb_model), ncol =nb_model)
colnames(Result) <- Actual_Models
#Weight_AVG_Value <- numeric(ntry)
Best_Model_table <- numeric(nb_model-1)
names(Best_Model_table) <- Actual_Models[-1]
Sample_test<- (min_game:max_game)
for(i in seq(ntry)){
Rm <- Sample_test[i]
Data_train <- Data[1:(Rm-1),]
Data_predict <- Data[Rm,]
Pts_actual <- unlist(Data_predict[,3])
Data_predict[,(3:12)] <- NA
lm_mod <- lm(Points~., data = Data_train)
glm_pois <- glm(Points~., data = Data_train, family = "poisson")
glm_nbin <- glm.nb(Points~., data = Data_train)
#glm_elasticnet <- glmnetUtils::cv.glmnet(Points~., data = Data[-Rm,], family = "poisson")
Pts_actual <- unlist(Data_predict[,3])
Data_predict[,(3:12)] <- NA
data.imputed <- missForest(rbind(Data_train,Data_predict))$ximp
##XGBoost no RF
new_data <- Data[(1:(480+i)),-(4:12)]
Result[i,1] <- Pts_actual
Result[i,2] <- unlist(predict(lm_mod, newdata = data.imputed[Rm,-3]))
Result[i,3] <- unlist(predict(glm_pois, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,4] <- unlist(predict(glm_nbin, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,5] <- unlist(data.imputed[Rm,3])
Result[i,6] <- mean(replicate(10,(XGB_VALUE(Data_Impute = data.imputed))))
Result[i,7] <- XGB_VALUE(new_data)
if(i == 1){
Result[i,8] <- mean(Result[i, -1])
}else{
Best_model_order <- which.min(sapply(seq(nb_model-1), function(j) abs(Result[(i-1),(j+1)]- Result[(i-1),1])))
Best_Model_table[Best_model_order] <- Best_Model_table[Best_model_order] +1
Result[i,8] <- weighted.mean(Result[i,-1], Best_Model_table)
}
print(i)
print(paste(round(i/ntry,3)*100, "%", sep = ""))
}
}
Rd_Result <- apply(Result, 2, round)
Best_model_order_Final <- sapply(seq(ntry), function(i) which.min(sapply(seq(nb_model-1), function(j) abs(Result[i,(j+1)]- Result[i,1]))))
Best_Model_table_Final <- tabulate(Best_model_order_Final, nb_model-1)
names(Best_Model_table_Final) <- Actual_Models[-1]
Best_Model_table_Final
if (!require("pacman")) install.packages("pacman")
pacman::p_load("rvest",
"plyr",
"lubridate",
"rpart",
"rpart.plot",
"abind",
"rstudioapi",
"GMCM",
"glmnet",
"fitdistrplus",
"logspline",
"mice",
"VIM",
"lattice",
"gdata",
"missForest",
"rsample",
"purrr",
"vtreat",
"xgboost")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("rvest",
"plyr",
"lubridate",
"rpart",
"rpart.plot",
"abind",
"rstudioapi",
"GMCM",
"glmnet",
"fitdistrplus",
"logspline",
"mice",
"VIM",
"lattice",
"gdata",
"missForest",
"rsample",
"purrr",
"vtreat",
"xgboost",
"MASS")
install.packages("rstudioapi")
library(rstudioapi)
path_base <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(path_base)
# Libraries ###################################################################################
source("NFL_Packages.R")
# Base Infos ##################################################################################
source("NFL_Base_Info.R")
# NFL Web Scraping ############################################################################
source("NFL_Functions.R")
# Predict Scores ##############################################################################
Data_NFL <- Stat_UTD(Save_RDS = T)
Data_Team_Szn <- Data_NFL[[1]]
Data_Szn_Week <- Data_NFL[[2]]
# Format Data #################################################################################
C_Data_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) cbind(Data_Team_Szn[[Team]][[Szn]][,1:10], apply(Data_Team_Szn[[Team]][[Szn]][,11:20],2,GMCM:::cummean))))
for(Team in seq(length(Complete_Names))){
for(Szn in seq(length(C_Data_Team_Szn[[1]]))){
colnames(C_Data_Team_Szn[[Team]][[Szn]]) <- c(colnames(Data_Team_Szn[[1]][[1]])[1:10], sprintf("C_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20]))
}
}
SZN_Games <- lapply(seq(2), function(Szn) do.call("rbind", Data_Szn_Week[[Szn]]))
All_games <- do.call("rbind", SZN_Games)
# Rank----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ranking_Stats_Szn <-unlist(list(lapply((sprintf("C_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:15])),
function(Stats) lapply(seq(2),
function(Szn) t(do.call("rbind",lapply(seq(16), function(Week)
33 - as.numeric(rank(unlist(sapply(seq(32),
function(Team) C_Data_Team_Szn[[Team]][[Szn]][[Stats]][Week])), ties.method = "average"))))))),
lapply((sprintf("C_%s",  colnames(Data_Team_Szn[[1]][[1]])[16:20])),
function(Stats) lapply(seq(2),
function(Szn) t(do.call("rbind",lapply(seq(16), function(Week)
as.numeric(rank(unlist(sapply(seq(32),
function(Team) C_Data_Team_Szn[[Team]][[Szn]][[Stats]][Week])), ties.method = "average" ) ))))))), recursive = F)
# Cumulative Ranking----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ranking_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) t(do.call("rbind", lapply(seq(length(Ranking_Stats_Szn)), function(Stats)  Ranking_Stats_Szn[[Stats]][[Szn]][Team,])))))
C_Ranking_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) t(do.call("rbind", lapply(seq(length(Ranking_Stats_Szn)), function(Stats)  GMCM:::cummean(Ranking_Stats_Szn[[Stats]][[Szn]][Team,]))))))
Rank_E_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) do.call("rbind",  lapply(seq(16),
function(Week) C_Ranking_Team_Szn[[as.numeric(Data_Team_Szn[[Team]][[Szn]]$Rang_Alpha_VS)[Week]]][[Szn]][Week,]))))
C_Rank_E_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) apply(Rank_E_Team_Szn[[Team]][[Szn]],2,GMCM:::cummean)))
for(Team in seq(32)){
for(Szn in seq(2)){
colnames(Ranking_Team_Szn[[Team]][[Szn]]) <- sprintf("Rank_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
colnames(C_Ranking_Team_Szn[[Team]][[Szn]]) <- sprintf("C_Rank_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
colnames(Rank_E_Team_Szn[[Team]][[Szn]]) <- sprintf("Rank_E_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
colnames(C_Rank_E_Team_Szn[[Team]][[Szn]]) <- sprintf("C_Rank_E_%s",  colnames(Data_Team_Szn[[1]][[1]])[11:20])
}
}
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DataRank_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) cbind(Data_Team_Szn[[Team]][[Szn]], Ranking_Team_Szn[[Team]][[Szn]], Rank_E_Team_Szn[[Team]][[Szn]])))
C_DataRank_Team_Szn <- lapply(seq(32), function(Team) lapply(seq(2), function(Szn) cbind(C_Data_Team_Szn[[Team]][[Szn]], C_Ranking_Team_Szn[[Team]][[Szn]], C_Rank_E_Team_Szn[[Team]][[Szn]])))
Total_Games_Szn_Data <- lapply(seq(2), function(Szn) do.call("rbind", lapply(seq(32), function(Team) DataRank_Team_Szn[[Team]][[Szn]])))
Total_Games_Szn_C.Data <- lapply(seq(2), function(Szn) do.call("rbind", lapply(seq(32), function(Team) C_DataRank_Team_Szn[[Team]][[Szn]])))
Total_Games_Rank_C.Rank <- lapply(seq(2), function(Szn)lapply(seq(32), function(Team) merge(DataRank_Team_Szn[[Team]][[Szn]], C_DataRank_Team_Szn[[Team]][[Szn]])))
C_E_Stat_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) t(sapply(seq(15), function(Games)  Total_Games_Rank_C.Rank[[Szn]][[as.numeric(unlist(Total_Games_Rank_C.Rank[[Szn]][[Team]][,7]))[(Games+1)]]][Games,41:50]))))
for(Szn in seq(2)){
for(Team in seq(32)){
colnames(C_E_Stat_Szn_Team[[Szn]][[Team]]) <- paste("C_E", substr(colnames(C_E_Stat_Szn_Team[[Szn]][[Team]]),2, 20), sep = "")
}
}
Decal_Total_wo_order_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) cbind(Total_Games_Rank_C.Rank[[Szn]][[Team]][2:16, c(6, 11:20)], Total_Games_Rank_C.Rank[[Szn]][[Team]][1:15, -c(6,11:20)], C_E_Stat_Szn_Team[[Szn]][[Team]])))
Decal_Total_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) Decal_Total_wo_order_Szn_Team[[Szn]][[Team]][,c("Game_Nb", "Team_Abb", "Rang_Alpha","Team_Abb_VS", "Rang_Alpha_VS",
"Outcome", "Points",
"Points_VS", "Yards", "FirstDowns", "Int", "Fum", "Yards_VS",  "FirstDowns_VS",  "Int_VS", "Fum_VS","HomeField",
"C_Points", "C_Yards", "C_FirstDowns", "C_Int",  "C_Fum",
"C_Points_VS", "C_Yards_VS","C_FirstDowns_VS", "C_Int_VS", "C_Fum_VS",
"C_E_Points", "C_E_Yards", "C_E_FirstDowns","C_E_Int", "C_E_Fum",
"C_E_Points_VS", "C_E_Yards_VS", "C_E_FirstDowns_VS", "C_E_Int_VS", "C_E_Fum_VS",
"Rank_Points", "Rank_Yards", "Rank_FirstDowns", "Rank_Int", "Rank_Fum",
"Rank_Points_VS", "Rank_Yards_VS", "Rank_FirstDowns_VS", "Rank_Int_VS", "Rank_Fum_VS",
"Rank_E_Points", "Rank_E_Yards", "Rank_E_FirstDowns",  "Rank_E_Int", "Rank_E_Fum",
"Rank_E_Points_VS", "Rank_E_Yards_VS", "Rank_E_FirstDowns_VS", "Rank_E_Int_VS", "Rank_E_Fum_VS",
"C_Rank_Points", "C_Rank_Yards", "C_Rank_FirstDowns", "C_Rank_Int", "C_Rank_Fum",
"C_Rank_Points_VS", "C_Rank_Yards_VS","C_Rank_FirstDowns_VS", "C_Rank_Int_VS", "C_Rank_Fum_VS",
"C_Rank_E_Points", "C_Rank_E_Yards", "C_Rank_E_FirstDowns", "C_Rank_E_Int", "C_Rank_E_Fum",
"C_Rank_E_Points_VS", "C_Rank_E_Yards_VS", "C_Rank_E_FirstDowns_VS", "C_Rank_E_Int_VS", "C_Rank_E_Fum_VS")]))
for(Szn in seq(2)){
for(Team in seq(32)){
Decal_Total_Szn_Team[[Szn]][[Team]]$Game_Nb <- Decal_Total_Szn_Team[[Szn]][[Team]]$Game_Nb+1
}
}
#Cant_Know_Before_Or_Useless <- c("Rang_Alpha", "Rang_Alpha_VS", "Outcome", "Yards", "FirstDowns", "Int", "Fum", "Points_VS", "Yards_VS", "FirstDowns_VS", "Int_VS", "Fum_VS")
Cant_Know_Before_Or_Useless <- c("Rang_Alpha", "Rang_Alpha_VS", "Outcome")
Test_V_KB_Total_Szn_Team <- lapply(seq(2), function(Szn) lapply(seq(32), function(Team) Decal_Total_Szn_Team[[Szn]][[Team]][,-..Cant_Know_Before_Or_Useless]))
Total_Decal_2018 <- do.call("rbind", Test_V_KB_Total_Szn_Team[[1]])
Total_Decal_2019 <- do.call("rbind", Test_V_KB_Total_Szn_Team[[2]])
Total_Decal <- rbind(Total_Decal_2018, Total_Decal_2019)
Total_Decal$Points <- as.numeric(Total_Decal$Points)
Total_Decal$Team_Abb <- as.factor(Total_Decal$Team_Abb)
Total_Decal$Team_Abb_VS <- as.factor(Total_Decal$Team_Abb_VS)
Total_Decal$HomeField <- as.factor(Total_Decal$HomeField)
Data_test <- cbind(Total_Decal[,c(2:3)],apply(as.matrix(Total_Decal[,-c(1:3)]), 2, as.numeric) )
install.packages("rstudioapi")
XGB_VALUE <- function(Data_Impute, prop_train = 0.5,  N_rounds= 800, Max_Depth = 2,LR_E = 0.1, ESR = 30){
nb_sample <- round(nrow(Data_Impute) * prop_train)
sample_train <- sample(seq(nrow(Data_Impute)-1), nb_sample, replace = F)
train <- Data_Impute[sample_train,]
test <- Data_Impute[-sample_train,]
test_row_pred <- nrow(Data_Impute)- nb_sample
trainm <- sparse.model.matrix(Points ~ .-1, data = train)
train_label <- train$Points
train_matrix <- xgb.DMatrix(data = as.matrix(trainm), label = unlist(train_label))
testm <- sparse.model.matrix(Points ~ . , data = test)
test_label <- test$Points
test_matrix <- xgb.DMatrix(data = as.matrix(testm), label = unlist(test_label))
predm <- sparse.model.matrix(Points ~ . , data = test[test_row_pred, ])
pred_label <- test[test_row_pred, ]$Points
pred_matrix <- xgb.DMatrix(data = as.matrix(predm), label = unlist(pred_label))
params_xgb <- list(train= train_matrix, test = test_matrix)
xgb_model4 <- xgb.train(data = train_matrix, booster = "gbtree", nrounds= N_rounds, max_depth =Max_Depth, eval_metric = "rmse",
eta =LR_E, watchlist = params_xgb, early_stopping_rounds = ESR)
colnames(pred_matrix)[1] <- xgb_model4$feature_names[1]
Result_XGB <-  predict(xgb_model4, newdata = pred_matrix, class = "response")
return(Result_XGB)
}
min_game <- 481
max_game <- 960
nb_model <- 6
ntry <- length(min_game:max_game)
Result <- matrix(numeric(ntry *nb_model), ncol =nb_model)
colnames(Result) <- c("Actual Value", "LM", "GLM POIS", "GLM NBIN","MissRF", "XgBoost")
Sample_test<- (min_game:max_game)
Sample_test
min_game <- 481
max_game <- 482
nb_model <- 6
ntry <- length(min_game:max_game)
Result <- matrix(numeric(ntry *nb_model), ncol =nb_model)
colnames(Result) <- c("Actual Value", "LM", "GLM POIS", "GLM NBIN","MissRF", "XgBoost")
Sample_test<- (min_game:max_game)
for(i in seq(ntry)){
Rm <- Sample_test[i]
Data <- Data_test[1:Rm,]
lm_mod <- lm(Points~., data = Data[-Rm,])
glm_pois <- glm(Points~., data = Data[-Rm,], family = "poisson")
glm_nbin <- glm.nb(Points~., data = Data[-Rm,])
#glm_elasticnet <- glmnetUtils::cv.glmnet(Points~., data = Data[-Rm,], family = "poisson")
Data[Rm,(3:12)] <- NA
data.imputed <- missForest(Data)$ximp
Result[i,1] <- unlist(Data_test[Rm,3])
Result[i,2] <- unlist(predict(lm_mod, newdata = data.imputed[Rm,-3]))
Result[i,3] <- unlist(predict(glm_pois, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,4] <- unlist(predict(glm_nbin, newdata = data.imputed[Rm,-3], type = "response"))
Result[i,5] <- unlist(data.imputed[Rm,3])
Result[i,6] <-mean(replicate(10,(XGB_VALUE(Data_Impute = data.imputed))))
print(paste(round(i/ntry,3)*100, "%", sep = ""))
}
Best_Model <- tabulate(sapply(seq(ntry), function(i) which.min(sapply(seq(nb_model-1), function(j) abs(Result[i,(j+1)]- Result[i,1])))), nb_model-1)
names(Best_Model) <- c("LM", "GLM POIS", "GLM NBIN", "MissRF", "XgBoost")
print(Best_Model)
par(mfrow =c(nb_model-1,2))
dif_abs <- do.call("rbind", lapply(seq(ntry), function(i) sapply(seq(nb_model-1), function(j) abs(Result[i,(j+1)]- Result[i,1]))))
dif <- do.call("rbind", lapply(seq(ntry), function(i) sapply(seq(nb_model-1), function(j) Result[i,(j+1)]- Result[i,1])))
#saveRDS(Result, file = "Resultats_2020_04_27")
par(mfrow = c(1,1))
#LM #########################################################
hist(dif[,1], density = 60, main = "Distribution rÃ©sidus modÃ¨le linÃ©aire (prÃ©dit - observÃ©)", xlab = "Points de diffÃ©rence", ylab = "FrÃ©quence", col = "red", breaks = 12)
plot(dif[,1], main = "graphique rÃ©sidus modÃ¨le linÃ©aire (prÃ©dit - observÃ©)", xlab = "Parties", ylab = "DiffÃ©rence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,2], density = 60, main = "Distribution rÃ©sidus GLM Poisson (prÃ©dit - observÃ©)", xlab = "Points de diffÃ©rence", ylab = "FrÃ©quence", col = "red", breaks = 12)
plot(dif[,2], main = "graphique rÃ©sidus modÃ¨le GLM Poisson (prÃ©dit - observÃ©)", xlab = "Parties", ylab = "DiffÃ©rence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,3], density = 60, main = "Distribution rÃ©sidus GLM Binomiale nÃ©gative (prÃ©dit - observÃ©)", xlab = "Points de diffÃ©rence", ylab = "FrÃ©quence", col = "red", breaks = 12)
plot(dif[,3], main = "graphique rÃ©sidus modÃ¨le GLM Binomiale nÃ©gative (prÃ©dit - observÃ©)", xlab = "Parties", ylab = "DiffÃ©rence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,4], density = 60, main = "Distribution rÃ©sidus Random Forest (prÃ©dit - observÃ©)", xlab = "Points de diffÃ©rence", ylab = "FrÃ©quence", col = "red", breaks = 12)
plot(dif[,4], main = "graphique rÃ©sidus modÃ¨le Random Forest (prÃ©dit - observÃ©)", xlab = "Parties", ylab = "DiffÃ©rence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,5], density = 60, main = "Distribution rÃ©sidus XgBoost (prÃ©dit - observÃ©)", xlab = "Points de diffÃ©rence", ylab = "FrÃ©quence", col = "red", breaks = 12)
plot(dif[,5], main = "graphique rÃ©sidus modÃ¨le XgBoost (prÃ©dit - observÃ©)", xlab = "Parties", ylab = "DiffÃ©rence")
abline(h = 0, col = "blue", lw = 2)
sum(dif[,1]^2)/(ntry -1)
sum(dif[,2]^2)/(ntry -1)
sum(dif[,3]^2)/(ntry -1)
sum(dif[,4]^2)/(ntry -1)
sum(dif[,5]^2)/(ntry -1)
mean(abs(dif[,1]))
mean(abs(dif[,2]))
mean(abs(dif[,3]))
mean(abs(dif[,4]))
mean(abs(dif[,5]))
sd(dif[,1])
sd(dif[,2])
sd(dif[,3])
sd(dif[,4])
sd(dif[,5])
hist(dif[,1], density = 60, main = "Distribution résidus modèle linéaire (prédit - observé)", xlab = "Points de différence", ylab = "Fréquence", col = "red", breaks = 12)
plot(dif[,1], main = "graphique résidus modèle linéaire (prédit - observé)", xlab = "Parties", ylab = "Différence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,2], density = 60, main = "Distribution résidus GLM Poisson (prédit - observé)", xlab = "Points de différence", ylab = "Fréquence", col = "red", breaks = 12)
plot(dif[,2], main = "graphique résidus modèle GLM Poisson (prédit - observé)", xlab = "Parties", ylab = "Différence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,3], density = 60, main = "Distribution résidus GLM Binomiale négative (prédit - observé)", xlab = "Points de différence", ylab = "Fréquence", col = "red", breaks = 12)
plot(dif[,3], main = "graphique résidus modèle GLM Binomiale négative (prédit - observé)", xlab = "Parties", ylab = "Différence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,4], density = 60, main = "Distribution résidus Random Forest (prédit - observé)", xlab = "Points de différence", ylab = "Fréquence", col = "red", breaks = 12)
plot(dif[,4], main = "graphique résidus modèle Random Forest (prédit - observé)", xlab = "Parties", ylab = "Différence")
abline(h = 0, col = "blue", lw = 2)
hist(dif[,5], density = 60, main = "Distribution résidus XgBoost (prédit - observé)", xlab = "Points de différence", ylab = "Fréquence", col = "red", breaks = 12)
plot(dif[,5], main = "graphique résidus modèle XgBoost (prédit - observé)", xlab = "Parties", ylab = "Différence")
abline(h = 0, col = "blue", lw = 2)
sum(dif[,1]^2)/(ntry -1)
sum(dif[,2]^2)/(ntry -1)
sum(dif[,3]^2)/(ntry -1)
sum(dif[,4]^2)/(ntry -1)
sum(dif[,5]^2)/(ntry -1)
mean(abs(dif[,1]))
mean(abs(dif[,2]))
mean(abs(dif[,3]))
mean(abs(dif[,4]))
mean(abs(dif[,5]))
sd(dif[,1])
sd(dif[,2])
sd(dif[,3])
sd(dif[,4])
sd(dif[,5])
